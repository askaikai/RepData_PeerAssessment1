summary(x)
summary(y)
plot(x,y)
par(mfrow=c(1,1))
plot(x,y)
fit = lm(y~x)
summary(fit)
fit2 = lm(y ~ 1+I(x)+I(x^2))
summary(fit2)
fit3 = lm(y ~ 1+x+I(x^2))
summary(fit3)
64+36
red = 64
blue = 36
total = red + blue
red/total*(1-red/total)+blue/total*(1-blue/total)
log
log(10)
-(red/total*log(red/total)+blue/total*log(blue/total))
mean[0.1,0.15,0.2,0.2,0.55,0.6,0.6,0.65, 0.7,0.75]
mean(1:3)
mean[1:3]
mean(0.1,0.15,0.2,0.2,0.55,0.6,0.6,0.65, 0.7,0.75)
(.1+.15+.2+.2+.55+.6+.6+.65+.7+.75)/10
library(tree)
require(tree)
library("tree")
install.packages('tree')
require('tree')
rm(list=ls())
require(ISLR)
require(tree)
attach(Carseats)
hist(Sales)
High=ifelse(Sales<=8,"No","Yes")
High
Carseats=data.frame(Carseats, High)
tree.carseats=tree(High~.-Sales,data=Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats,pretty=0)
tree.carseats
set.seed(1011)
train=sample(1:nrow(Carseats),250)
tree.carseats=tree(High~.-Sales,Carseats,subset=train)
plot(tree.carseats);text(tree.carseats,pretty=0)
tree.pred=predict(tree.carseats,Carseats[-train,],type="class")
with(Carseats[-train,],table(tree.pred,High))
(72+33)/150
cv.carseats=cv.tree(tree.carseats,FUN=prune.misclass)
cv.carseats
plot(cv.carseats)
prune.carseats=prune.misclass(tree.carseats,best=13)
plot(prune.carseats);text(prune.carseats,pretty=0)
```
tree.pred=predict(prune.carseats,Carseats[-train,],type="class")
with(Carseats[-train,],table(tree.pred,High))
(72+32)/150
require(randomForest)
require(MASS)
install.packages('randomForest')
require(randomForest)
require(MASS)
set.seed(101)
dim(Boston)
train=sample(1:nrow(Boston),300)
?Boston
rf.boston=randomForest(medv~.,data=Boston,subset=train)
rf.boston
oob.err=double(13)
oob.err
test.err=double(13)
for(mtry in 1:13){
fit=randomForest(medv~.,data=Boston,subset=train,mtry=mtry,ntree=400)
oob.err[mtry]=fit$mse[400]
pred=predict(fit,Boston[-train,])
test.err[mtry]=with(Boston[-train,],mean((medv-pred)^2))
cat(mtry," ")
}
matplot(1:mtry,cbind(test.err,oob.err),pch=19,col=c("red","blue"),type="b",ylab="Mean Squared Error")
legend("topright",legend=c("OOB","Test"),pch=19,col=c("red","blue"))
require(gbm)
install.packages('gbm')
require(gbm)
boost.boston=gbm(medv~.,data=Boston[train,],distribution="gaussian",n.trees=10000,shrinkage=0.01,interaction.depth=4)
summary(boost.boston)
plot(boost.boston,i="lstat")
plot(boost.boston,i="rm")
n.trees=seq(from=100,to=10000,by=100)
predmat=predict(boost.boston,newdata=Boston[-train,],n.trees=n.trees)
dim(predmat)
berr=with(Boston[-train,],apply( (predmat-medv)^2,2,mean))
plot(n.trees,berr,pch=19,ylab="Mean Squared Error", xlab="# Trees",main="Boosting Test Error")
abline(h=min(test.err),col="red")
install.packages("KernSmooth")
library(KernSmooth)
?par
par(mfrow)
par('mfrow')
?pch
oauth_endpoints("github")
library(httr)
oauth_endpoints("github")
?oauth_endpoints
myapp <- oauth_app("github", "56b637a5baffac62cad9")
?oauth_app
rm(list=ls())
require(data.table)
fileUrl = 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv'
download.file(fileUrl, destfile='AmericanCommunitySurvey.csv',method='curl')
acs = fread('AmericanCommunitySurvey.csv')
View(acs)
require(sqldf)
?dbSendQuery
?dbConnect
?dbSendQuery
?sqldf
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select * from acs")
pwgtp1 = sqldf("select pwgtp1 from acs where AGEP < 50")
length(pwgtp1)
class(pwgtp1)
View(pwgtp1)
rm(list=ls())
library(lattice)
?xyplot
x = rnorm(100)
y=x
xyplot(y~x)
?xyplot
?qplot
library(ggplot2)
?qplot
rm(list=ls())
ls()
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
print(p)
?trellis.par.set
?print.trellis
?par
?splom
rm(list=ls())
library(datasets)
data(airquality)
library(ggplot2)
?qplot
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(airquality)
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
rm(list=ls())
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
ls()
g
library(movies)
qplot(votes, rating, data = movies)
?ggplot
ggplot(movies, aes(votes, rating))
ggplot(movies, aes(movies$votes, movies$rating))
g <- ggplot(movies, aes(votes, rating))
g
g + geom_line()
g
g<-g+geom_line()
g
?geom_bar
rm(list=ls())
library(ggplot2)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
g <- ggplot(movies, aes(votes, rating))
g<-g+geom_line()
g
rm(list=ls())
library(lattice)
?xyplot
x = rnorm(100)
y=x
ls()
p=xyplot(x~y)
p
rm(list=ls())
library(lattice)
?panel.abline
?text
?points
?axis
?llines
q90
q()
library(knitr)
setwd('~/Documents/Coursera/ReproducibleResearch//RepData_PeerAssessment1')
?knit2html
knit2html('PA1_template.Rmd')
rm(list=ls())
setwd('~/Documents/Coursera/ReproducibleResearch//RepData_PeerAssessment1')
d = read.csv('activity.csv')
library(ggplot2)
library(sqldf)
dSum = sqldf('select date, sum(steps) as sumSteps from d group by date')
dSum$sumSteps = as.numeric(dSum$sumSteps)
g= ggplot(dSum, aes(sumSteps)) +
geom_histogram(binwidth=500, colour="black", fill="white") +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
ggsave(filename="figure/histTotalNumSteps.png",plot=g,dpi=72)
g
library(xtable)
table = sqldf('select avg(sumSteps), median(sumSteps) from dSum')
print(table, type="html")
head(d)
plot(d$interval)
d$interval[1:40]
time <- strptime(paste(d$date, sapply(d$interval, formatC, width = 4, flag = 0)), format = "%Y-%m-%d %H%M")
time
time <- strptime(sapply(d$interval, formatC, width = 4, flag = 0), format = "%H%M")
time
time <- strptime(sapply(d$interval, formatC, width = 2, flag = 0), format = "%H%M")
head(time)
?formatC
?strptime
head(d$interval)
time <- strptime(sapply(d$interval, formatC, width = 4, flag = 0), format = "%H%M%S")
head(time)
time <- strptime(d$interval, format = "%H%M%S")
head(time)
time <- strptime(d$interval, format = "%H%M")
head(time)
time <- strptime(paste(d$date, sapply(d$interval, formatC, width = 4, flag = 0)), format = "%Y-%m-%d %H%M")
head(time)
head(time,40)
a=time
b = gsub("^2012-\\w* ","",a)
head(b)
b = gsub("^2012-\\w*","",a)
head(b)
b = gsub("^2012-\\w*\\w*","",a)
head(b)
b = gsub("^2012-\\w*\\w* ","",a)
head(b)
b = gsub("^2012-\\w*-\\w* ","",a)
head(b)
rm(list=ls())
setwd('~/Documents/Coursera/ReproducibleResearch//RepData_PeerAssessment1')
d = read.csv('activity.csv')
d$interval_orig = d$interval
d$interval <- strptime(paste(d$date, sapply(d$interval_orig, formatC, width = 4, flag = 0)), format = "%Y-%m-%d %H%M")
d$interval = gsub("^2012-\\w*-\\w* ","",d$interval)
View(d)
library(ggplot2)
library(sqldf)
dSum = sqldf('select date, sum(steps) as sumSteps from d group by date')
dSum$sumSteps = as.numeric(dSum$sumSteps)
g= ggplot(dSum, aes(sumSteps)) +
geom_histogram(binwidth=500, colour="black", fill="white") +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
ggsave(filename="figure/histTotalNumSteps.png",plot=g,dpi=72)
g
library(xtable)
table = sqldf('select avg(sumSteps), median(sumSteps) from dSum')
print(table, type="html")
png(file='figure/avgDailyACtivityPattern.png')
dTimeSeries = sqldf('select interval, avg(steps) as avgSteps from d group by interval')
plot(dTimeSeries$interval, dTimeSeries$avgSteps, type="l",ann=FALSE)
head(dTimeSeries)
class(dTimeSeries$interval)
summary(d$interval)
summary(d$interval_orig)
2500/24
2355/24
d$interval
d$interval[1:40]
d[1:20,]
unique(d$interval_orig)
d$intervalIdx = 0
View(d)
d$interval_orig[12]
which(unique(d$interval_orig==d$interval_orig[12])
)
which(unique(d$interval_orig)==d$interval_orig[12])
which(unique(d$interval_orig)==d$interval_orig[273])
which(unique(d$interval_orig)==d$interval_orig[1050])
d$interval_orig[1050]
d$intervalIdx = 0
for (i in 1:length(d$intervalIdx)){
d$intervalIdx[i]= which(unique(d$interval_orig)==d$interval_orig[i])
}
View(d)
plot(d$intervalIdx)
class(d$intervalIdx)
plot(d$intervalIdx)
plot(d$intervalIdx,'l')
?plot
2355/5
dSum = sqldf('select date, sum(steps) as sumSteps from d group by date')
dSum$sumSteps = as.numeric(dSum$sumSteps)
g= ggplot(dSum, aes(sumSteps)) +
geom_histogram(binwidth=500, colour="black", fill="white") +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
ggsave(filename="figure/histTotalNumSteps.png",plot=g,dpi=72)
g
dTimeSeries = sqldf('select interval, intervalIdx, avg(steps) as avgSteps from d group by interval')
dTimeSeries[1:20,]
dim(dTimeSeries)
png(file='figure/avgDailyACtivityPattern.png')
dTimeSeries = sqldf('select interval, intervalIdx, avg(steps) as avgSteps from d group by interval')
plot(dTimeSeries$intervalIdx, dTimeSeries$avgSteps, type="l",ann=FALSE)
dev.off()
plot(dTimeSeries$intervalIdx, dTimeSeries$avgSteps, type="l",ann=FALSE)
title(main='Time-series of average steps at each interval across days',
xlab='interval', ylab='average number of steps')
dTimeSeries$interval
dTimeSeries$interval[1]
dTimeSeries$interval[1][1]
dTimeSeries$interval[1][[1]]
dTimeSeries$interval[[1]]
length(dTimeSeries$interval[1])
length(dTimeSeries$interval[[1]])
length(dTimeSeries$interval[1][[1]])
?grep
grep("\\w*:00:\\w*",dTimeSeries$interval[1])
grep("\\w*:00:\\w*",dTimeSeries$intervalIdx[1])
grep("\\d*:00:\\d*",dTimeSeries$intervalIdx[1])
grepl("\\d*:00:\\d*",dTimeSeries$intervalIdx[1])
grepl("^d*:00:\\d*",dTimeSeries$intervalIdx[1])
grepl("^d*:00:d*",dTimeSeries$intervalIdx[1])
grepl("(^\\d*):00:(\\d*)",dTimeSeries$intervalIdx[1])
dTimeSeries$interval[1]
grepl("(^\\d*):00:(\\d*)",dTimeSeries$interval[1])
grep("(^\\d*):00:(\\d*)",dTimeSeries$interval[1])
grep("(^\\d*):00:(\\d*)",dTimeSeries$interval)
zeroHour = grep("(^\\d*):00:(\\d*)",dTimeSeries$interval)
zeroHourIdx = dTimeSeries$interval[zeroHour]
zeroHourIdx
zeroHourIdx = grep("(^\\d*):00:(\\d*)",dTimeSeries$interval)
zeroHour = dTimeSeries$interval[zeroHourIdx]
zeroHour
dTimeSeries = sqldf('select interval, intervalIdx, avg(steps) as avgSteps from d group by interval')
plot(dTimeSeries$intervalIdx, dTimeSeries$avgSteps, type="l",ann=FALSE, xaxt="n")
axis(1, at=zeroHourIdx, labels=zeroHour)
title(main='Time-series of average steps at each interval across days',
xlab='interval', ylab='average number of steps')
zeroHourIdx
zeroHour = dTimeSeries$interval[zeroHourIdx]
png(file='figure/avgDailyACtivityPattern.png')
dTimeSeries = sqldf('select interval, intervalIdx, avg(steps) as avgSteps from d group by interval')
plot(dTimeSeries$intervalIdx, dTimeSeries$avgSteps, type="l",ann=FALSE, xaxt="n")
axis(1, at=zeroHourIdx, labels=zeroHour)
title(main='Time-series of average steps at each interval across days',
xlab='interval', ylab='average number of steps')
dev.off()
maxLine = which(dTimeSeries$avgSteps==max(dTimeSeries$avgSteps))
maxSteps = dTimeSeries$interval[maxLine]
a=matrix(0,length(names(d)),2)
for (i in 1:length(names(d))){
a[i,1] = names(d)[i]
a[i,2] = sum(is.na(d[i]))
}
a = data.frame(a)
colnames(a) = c('variable','NAcount')
print(a, type="html")
dFilled = d
naEntry = which(is.na(d$steps))
for (i in 1:length(naEntry)){
intervalIdx = which(dTimeSeries$interval==d$interval[naEntry][i])
dFilled$steps[naEntry][i]=dTimeSeries$avgSteps[intervalIdx]
}
print(head(d), type="html")
print(head(dFilled), type="html")
dSumFilled = sqldf('select date, sum(steps) as sumSteps from dFilled group by date')
dSumFilled$sumSteps = as.numeric(dSumFilled$sumSteps)
table = sqldf('select avg(sumSteps), median(sumSteps) from dSumFilled')
print(table, type="html")
dBig = data.frame(c(dSum$sumSteps, dSumFilled$sumSteps))
colnames(dBig)='dailyTotalSteps'
dBig$data = rep(c('original','filled'),each=dim(dBig)[1]/2)
g = ggplot(dBig,aes(x=dailyTotalSteps,color=data)) +
facet_grid(.~data) +
geom_histogram(binwidth=500, alpha=.2, position="identity", size = .8) +
theme_grey() +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
ggsave(filename="figure/histOrigVsFilledData.png",plot=g, dpi=72)
g
a = matrix(0,length(levels(d$date)),2)
for (i in 1:length(levels(d$date))){
a[i,1] = levels(d$date)[i]
a[i,2] = sum(is.na(d$steps[d$date==a[i,1]]))
}
a = data.frame(a)
colnames(a) = c('date','nNAs')
print(table(a$nNAs), type="html")
dSumFilled$days = weekdays(as.Date(dSumFilled$date), abbreviate=TRUE)
dSumFilled$days = gsub("^[m|t|w|f]\\w*", "Weekday", dSumFilled$days, perl=TRUE,ignore.case=TRUE)
dSumFilled$days = gsub("^s\\w*", "Weekend", dSumFilled$days, perl=TRUE,ignore.case=TRUE)
dSumFilledDays = sqldf('select days, avg(sumSteps) from dSumFilled group by days')
print(dSumFilledDays, type="html")
dFilled$days = weekdays(as.Date(dFilled$date), abbreviate=TRUE)
dFilled$days = gsub("^[m|t|w|f]\\w*", "Weekday", dFilled$days, perl=TRUE,ignore.case=TRUE)
dFilled$days = gsub("^s\\w*", "Weekend", dFilled$days, perl=TRUE,ignore.case=TRUE)
head(dFilled)
dDays = sqldf('select days, interval, intervalIdx, avg(steps) as avgSteps from dFilled group by days, interval')
head(dDays)
ggplot(data=dDays, aes(x=interval, y=avgSteps)) +
geom_point() +
geom_line() +
facet_grid(days~.) +
theme_grey() +
labs(list(title = 'Distribution of number of steps \n Weekday vs. Weekend', x = "interval", y = "number of steps"))
ggplot(data=dDays, aes(x=intervalIdx, y=avgSteps)) +
geom_point() +
geom_line() +
facet_grid(days~.) +
theme_grey() +
labs(list(title = 'Distribution of number of steps \n Weekday vs. Weekend', x = "interval", y = "number of steps"))
?scale_x_discrete
head(dDays)
ggplot(data=dDays, aes(x=intervalIdx, y=avgSteps)) +
geom_point() +
geom_line() +
facet_grid(days~.) +
theme_grey() +
scale_x_discrete(limits=interval) +
labs(list(title = 'Distribution of number of steps \n Weekday vs. Weekend', x = "interval", y = "number of steps"))
ggplot(data=dDays, aes(x=intervalIdx, y=avgSteps)) +
geom_point() +
geom_line() +
facet_grid(days~.) +
theme_grey() +
scale_x_discrete(limits=dDays$interval) +
labs(list(title = 'Distribution of number of steps \n Weekday vs. Weekend', x = "interval", y = "number of steps"))
ggplot(data=dDays, aes(x=intervalIdx, y=avgSteps)) +
geom_point() +
geom_line() +
facet_grid(days~.) +
theme_grey() +
labs(list(title = 'Distribution of number of steps \n Weekday vs. Weekend', x = "interval", y = "number of steps"))
ggplot(data=dDays, aes(x=intervalIdx, y=avgSteps)) +
geom_point() +
geom_line() +
facet_grid(days~.) +
theme_grey() +
scale_x_discrete(limits=intervalIdx) +
labs(list(title = 'Distribution of number of steps \n Weekday vs. Weekend', x = "interval", y = "number of steps"))
dDays[1:20,]
c(seq(from = 1, to = 288, by = 13))
c(seq(from = 1, to = 288, by = 12))
dDays$interval[c(seq(from = 1, to = 288, by = 12))]
zeroHourIdx = grep("(^\\d*):00:(\\d*)",dDays$interval)
zeroHourIdx
dDays$interval[565]
dDays$interval[24]
zeroHourIdx[24]
zeroHourIdx = grep("(^\\d*):00:(\\d*)",dDays$interval[1:24]) # look for xx:00:xx to use in plotting
zeroHourIdx
View(dDays)
dim(dDays)
dim(dDays)[1]
dim(dDays)[1]/2
zeroHourIdx = grep("(^\\d*):00:(\\d*)",dDays$interval[1:dim(dDays)[1]/2]) # look for xx:00:xx to use in plotting
zeroHourIdx
zeroHourIdx = grep("(^\\d*):00:(\\d*)",dDays$interval[1:((dim(dDays)[1])/2)]) # look for xx:00:xx to use in plotting
zeroHourIdx
zeroHour = dTimeSeries$interval[zeroHourIdx]
zeroHour
ggplot(data=dDays, aes(x=intervalIdx, y=avgSteps)) +
geom_point() +
geom_line() +
facet_grid(days~.) +
theme_grey() +
scale_x_discrete(breaks = zeroHourIdx, labels = zeroHour) +
labs(list(title = 'Distribution of number of steps \n Weekday vs. Weekend', x = "interval", y = "number of steps"))
ggplot(data=dDays, aes(x=intervalIdx, y=avgSteps)) +
geom_point() +
geom_line() +
facet_grid(days~.) +
theme_grey() +
scale_x_discrete(breaks = zeroHourIdx, labels = zeroHour) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(list(title = 'Distribution of number of steps \n Weekday vs. Weekend', x = "interval", y = "number of steps"))
60/6.6
knit2html('PA1_template.Rmd')
knit2html("PA1_template.Rmd",options="")
?knit2html
knit2html("PA1_template.Rmd",c('skip_images'))
knit2html("PA1_template.Rmd",options=c('skip_images'))
knit2html("PA1_template.Rmd")
markdownHTMLOptions()
markdownHTMLOptions(default=TRUE)
markdownHTMLOptions
?markdownHTMLOptions
options(markdown.HTML.options = markdownHTMLOptions(default = TRUE))
markdownHTMLOptions()
knit2html("PA1_template.Rmd")
