fit3 = lm(y ~ 1+x+I(x^2))
summary(fit3)
64+36
red = 64
blue = 36
total = red + blue
red/total*(1-red/total)+blue/total*(1-blue/total)
log
log(10)
-(red/total*log(red/total)+blue/total*log(blue/total))
mean[0.1,0.15,0.2,0.2,0.55,0.6,0.6,0.65, 0.7,0.75]
mean(1:3)
mean[1:3]
mean(0.1,0.15,0.2,0.2,0.55,0.6,0.6,0.65, 0.7,0.75)
(.1+.15+.2+.2+.55+.6+.6+.65+.7+.75)/10
library(tree)
require(tree)
library("tree")
install.packages('tree')
require('tree')
rm(list=ls())
require(ISLR)
require(tree)
attach(Carseats)
hist(Sales)
High=ifelse(Sales<=8,"No","Yes")
High
Carseats=data.frame(Carseats, High)
tree.carseats=tree(High~.-Sales,data=Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats,pretty=0)
tree.carseats
set.seed(1011)
train=sample(1:nrow(Carseats),250)
tree.carseats=tree(High~.-Sales,Carseats,subset=train)
plot(tree.carseats);text(tree.carseats,pretty=0)
tree.pred=predict(tree.carseats,Carseats[-train,],type="class")
with(Carseats[-train,],table(tree.pred,High))
(72+33)/150
cv.carseats=cv.tree(tree.carseats,FUN=prune.misclass)
cv.carseats
plot(cv.carseats)
prune.carseats=prune.misclass(tree.carseats,best=13)
plot(prune.carseats);text(prune.carseats,pretty=0)
```
tree.pred=predict(prune.carseats,Carseats[-train,],type="class")
with(Carseats[-train,],table(tree.pred,High))
(72+32)/150
require(randomForest)
require(MASS)
install.packages('randomForest')
require(randomForest)
require(MASS)
set.seed(101)
dim(Boston)
train=sample(1:nrow(Boston),300)
?Boston
rf.boston=randomForest(medv~.,data=Boston,subset=train)
rf.boston
oob.err=double(13)
oob.err
test.err=double(13)
for(mtry in 1:13){
fit=randomForest(medv~.,data=Boston,subset=train,mtry=mtry,ntree=400)
oob.err[mtry]=fit$mse[400]
pred=predict(fit,Boston[-train,])
test.err[mtry]=with(Boston[-train,],mean((medv-pred)^2))
cat(mtry," ")
}
matplot(1:mtry,cbind(test.err,oob.err),pch=19,col=c("red","blue"),type="b",ylab="Mean Squared Error")
legend("topright",legend=c("OOB","Test"),pch=19,col=c("red","blue"))
require(gbm)
install.packages('gbm')
require(gbm)
boost.boston=gbm(medv~.,data=Boston[train,],distribution="gaussian",n.trees=10000,shrinkage=0.01,interaction.depth=4)
summary(boost.boston)
plot(boost.boston,i="lstat")
plot(boost.boston,i="rm")
n.trees=seq(from=100,to=10000,by=100)
predmat=predict(boost.boston,newdata=Boston[-train,],n.trees=n.trees)
dim(predmat)
berr=with(Boston[-train,],apply( (predmat-medv)^2,2,mean))
plot(n.trees,berr,pch=19,ylab="Mean Squared Error", xlab="# Trees",main="Boosting Test Error")
abline(h=min(test.err),col="red")
install.packages("KernSmooth")
library(KernSmooth)
?par
par(mfrow)
par('mfrow')
?pch
oauth_endpoints("github")
library(httr)
oauth_endpoints("github")
?oauth_endpoints
myapp <- oauth_app("github", "56b637a5baffac62cad9")
?oauth_app
rm(list=ls())
require(data.table)
fileUrl = 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv'
download.file(fileUrl, destfile='AmericanCommunitySurvey.csv',method='curl')
acs = fread('AmericanCommunitySurvey.csv')
View(acs)
require(sqldf)
?dbSendQuery
?dbConnect
?dbSendQuery
?sqldf
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select * from acs")
pwgtp1 = sqldf("select pwgtp1 from acs where AGEP < 50")
length(pwgtp1)
class(pwgtp1)
View(pwgtp1)
rm(list=ls())
library(lattice)
?xyplot
x = rnorm(100)
y=x
xyplot(y~x)
?xyplot
?qplot
library(ggplot2)
?qplot
rm(list=ls())
ls()
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
print(p)
?trellis.par.set
?print.trellis
?par
?splom
rm(list=ls())
library(datasets)
data(airquality)
library(ggplot2)
?qplot
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(airquality)
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
rm(list=ls())
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
ls()
g
library(movies)
qplot(votes, rating, data = movies)
?ggplot
ggplot(movies, aes(votes, rating))
ggplot(movies, aes(movies$votes, movies$rating))
g <- ggplot(movies, aes(votes, rating))
g
g + geom_line()
g
g<-g+geom_line()
g
?geom_bar
rm(list=ls())
library(ggplot2)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
g <- ggplot(movies, aes(votes, rating))
g<-g+geom_line()
g
rm(list=ls())
library(lattice)
?xyplot
x = rnorm(100)
y=x
ls()
p=xyplot(x~y)
p
rm(list=ls())
library(lattice)
?panel.abline
?text
?points
?axis
?llines
q90
q()
setwd('~/Documents/Coursera/ReproducibleResearch//RepData_PeerAssessment1')
d = read.csv('activity.csv')
library(ggplot2)
library(sqldf)
dSum = sqldf('select date, sum(steps) as sumSteps from d group by date')
dSum$sumSteps = as.numeric(dSum$sumSteps)
ggplot(dSum, aes(sumSteps)) + geom_histogram(binwidth=500, colour="black", fill="white") +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
library(xtable)
table = sqldf('select avg(sumSteps), median(sumSteps) from dSum')
print(table, type="html")
dTimeSeries = sqldf('select interval, avg(steps) as avgSteps from d group by interval')
plot(dTimeSeries$interval, dTimeSeries$avgSteps, type="l",ann=FALSE)
title(main='Time-series of average steps at each interval across days',
xlab='interval', ylab='average number of steps')
dTimeSeries[1:20,]
max(dTimeSeries$avgSteps)
which(max(dTimeSeries$avgSteps))
which(dTimeSeries$avgSteps==max(dTimeSeries$avgSteps))
dTimeSeries$interval[dTimeSeries$avgSteps==max(dTimeSeries$avgSteps)]
View(dTimeSeries)
print('this is text')
line = which(dTimeSeries$avgSteps==max(dTimeSeries$avgSteps))
line
maxLine = which(dTimeSeries$avgSteps==max(dTimeSeries$avgSteps))
maxSteps = dTimeSeries$interval[maxLine]
maxSteps
ls()
names(d)
head(d,20)
is.na(d$steps)
sum(is.na(d$steps))
dim(d)
nNA = sum(is.na(d$steps))
nRow = dim(d)
sum(is.na(d$steps))
sum(is.na(d$date))
sum(is.na(d$interval))
a=matrix(0,3,2)
a
for (i in dim(a)[1])
a[i,1] = names(d)
names(d)
table = sqldf('select sum(steps) from * where steps=='NA'')
d$steps[1]
d$steps[1]=='NA'
is.na(d$steps[1])
table = sqldf('select sum(steps) from * where steps== \"NA\"')
table = sqldf('select sum(steps) from d where steps== \"NA\"')
table
table = sqldf('select sum(interval) from d where steps== \"NA\"')
table
class(d$interval)
table = sqldf('select count(interval) from d where steps== \"NA\"')
table
sqldf('select count(interval) from d where steps is \"NA\"')
sqldf('select avg(interval) from d where steps is \"NA\"')
names(d)
sqldf('select avg(interval) from d where steps>30)
sqldf('select avg(interval) from d where steps>30')
sqldf('select avg(interval) from d where steps == \"NA\"')
head(d)
sqldf('select interval from d where steps == \"NA\"')
sqldf('select interval from d where steps is \"NA\"')
sqldf('select interval from d where steps == 0')
sqldf('select avg(interval) from d where steps == NULL')
a=matrix(0,length(names(d)),2)
a
for (i in 1:length(names(d))){
a[i,1] = names(d)[i]
a[i,2] = sum(is.na(d[i]))
}
a
a = data.frame(a)
a
colnames(a) = c('variable','count of NA')
a
a$count of NA[1]
colnames(a) = c('variable','NA')
a
colnames(a) = c('variable','NAcount')
a
View(d)
View(dTimeSeries)
mean(d$steps[d$interval==0],na.rm==TRUE)
mean(d$steps[d$interval==0],na.rm =TRUE)
dFilled = d
d$interval[is.na(d$steps)]
naEntry = which(is.na(d$steps))
naEntry
dTimeSeries[naEntry,2]
d$interval[naEntry]
dTimeSeries[d$interval[naEntry]]
dTimeSeries$avgSteps[d$interval[naEntry]]
dTimeSeries$avgSteps[d$interval][naEntry]
dTimeSeries$avgSteps[d$interval[1]
]
dTimeSeries$avgSteps[d$interval[2]]
dTimeSeries$avgSteps[d$interval[naEntry[1]]]
dTimeSeries$avgSteps[d$interval[naEntry[2]]]
d$interval
naEntry
d$interval[naEntry]
d$interval[naEntry][1]
d$interval[naEntry][2]
d$interval[naEntry][3]
which(dTimeSeries$interval==d$interval[naEntry][1])
which(dTimeSeries$interval==d$interval[naEntry][26])
which(dTimeSeries$interval==d$interval[naEntry][289])
dTimeSeries$avgSteps[which(dTimeSeries$interval==d$interval[naEntry][289])]
which(dTimeSeries$interval==d$interval[naEntry][289])
dFilled = d
naEntry = which(is.na(d$steps))
for (i in length(naEntry)){
intervalIdx = which(dTimeSeries$interval==d$interval[naEntry][i])
dFilled$steps[i]=dTimeSeries$avgSteps[intervalIdx]
}
View(dFilled)
dFilled = d
naEntry = which(is.na(d$steps))
for (i in naEntry){
intervalIdx = which(dTimeSeries$interval==d$interval[naEntry][i])
dFilled$steps[i]=dTimeSeries$avgSteps[intervalIdx]
}
i
d$interval[naEntry][8929]
dFilled = d
naEntry = which(is.na(d$steps))
for (i in 1:length(naEntry){
intervalIdx = which(dTimeSeries$interval==d$interval[naEntry[i]])
dFilled$steps[naEntry[i]]=dTimeSeries$avgSteps[intervalIdx]
}
naEntry
d$interval[naEntry][i]
d$interval[naEntry][4]
d$interval[naEntry][289]
dFilled$steps[naEntry][289]
dFilled = d
naEntry = which(is.na(d$steps))
for (i in 1:length(naEntry)){
intervalIdx = which(dTimeSeries$interval==d$interval[naEntry][i])
dFilled$steps[naEntry][i]=dTimeSeries$avgSteps[intervalIdx]
}
View(dFilled)
d[2017:2027,]
dFilled[2017:2027,]
View(dFilled)
class(dFilled)
class(dFilled$steps)
class(dFilled$intercal)
class(dFilled$interval)
dSumFilled = sqldf('select date, sum(steps) as sumSteps from dFilled group by date')
dSumFilled$sumSteps = as.numeric(dSumFilled$sumSteps)
dSumFilled
ggplot(dSumFilled, aes(sumSteps)) + geom_histogram(binwidth=500, colour="black", fill="white")
ggplot(histogram,aes(sumSteps))+
geom_histogram(data = dSum, binwidth=500, fill="white") +
geom_histogram(data = dSumFilled, binwidth=500, fill="blue") +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
dBig = cbind(dSum, dSumFilled)
dim(dBig)
dBig = cbind(dSum, dSumFilled)
ggplot(histogram,aes(sumSteps))+
geom_histogram(data = dSum, binwidth=500, fill="white") +
geom_histogram(data = dSumFilled, binwidth=500, fill="blue") +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
ggplot(dBig,aes(sumSteps))+
geom_histogram(data = dSum, binwidth=500, fill="white") +
geom_histogram(data = dSumFilled, binwidth=500, fill="blue") +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
?geom_histogram
ggplot(dBig,aes(sumSteps))+
geom_histogram(data = dSum, binwidth=500, fill="white", alpha=.2) +
geom_histogram(data = dSumFilled, binwidth=500, fill="blue", alpha=.2) +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
dBig = rbind(dSum$sumSteps, dSumFilled$sumSteps)
dBig
class(dBig)
dBig = data.frame(dBig)
class(dBig)
dBig
dSum$sumSteps
dim(dBig)
t1 <- data.frame(xx = c(runif(100,20,50),runif(100,40,80),runif(100,0,30)),yy = rep(letters[1:3],each = 100))
t1
dBig = data.frame(c(dSum$sumSteps, dSumFilled$sumSteps))
dim(dBig)
colnames(dBig)='dailyTotalSteps'
dBig$data = rep(c('original','filled'),each=length(dBig)/2)
ength(dBig)
length(dBig)/2
dim(dBig)
dBig$data = rep(c('original','filled'),each=dim(dBig)[1]/2)
dBig
ggplot(dBig,aes(sumSteps))+
geom_histogram(data = subset(dBig,data=='original'), binwidth=500, fill="white", alpha=.5) +
geom_histogram(data = subset(dBig,data=='filled'), binwidth=500, fill="blue", alpha=.5) +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
names(dBig)
ggplot(dBig,aes(dailyTotalSteps))+
geom_histogram(data = subset(dBig,data=='original'), binwidth=500, fill="white", alpha=.5) +
geom_histogram(data = subset(dBig,data=='filled'), binwidth=500, fill="blue", alpha=.5) +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
ggplot(dBig,aes(dailyTotalSteps))+
geom_histogram(data = subset(dBig,data=='original'), binwidth=500, fill="black", alpha=.5) +
geom_histogram(data = subset(dBig,data=='filled'), binwidth=500, fill="blue", alpha=.5) +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
ggplot(dBig,aes(dailyTotalSteps))+
geom_histogram(data = subset(dBig,data=='original'), binwidth=500, fill="black", alpha=1) +
geom_histogram(data = subset(dBig,data=='filled'), binwidth=500, fill="blue", alpha=.5) +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
ggplot(dBig,aes(dailyTotalSteps))+
geom_histogram(data = subset(dBig,data=='original'), binwidth=500, fill="green", alpha=.2) +
geom_histogram(data = subset(dBig,data=='filled'), binwidth=500, fill="blue", alpha=.2) +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
ggplot(dBig,aes(dailyTotalSteps))+
geom_histogram(data = subset(dBig,data=='original'), binwidth=500, fill="red", alpha=.2) +
geom_histogram(data = subset(dBig,data=='filled'), binwidth=500, fill="blue", alpha=.2) +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
ggplot(dBig,aes(dailyTotalSteps))+
geom_histogram(data = subset(dBig,data=='original'), binwidth=500, fill="red", alpha=.2) +
geom_histogram(data = subset(dBig,data=='filled'), binwidth=500, fill="blue", alpha=.2) +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)")) +
scale_color_manual(values = c("original" = 'red','filled' = 'blue')) +
scale_shape_manual(values = c('original' = 17, 'filled' = 16))
ggplot(dBig,aes(dailyTotalSteps))+
geom_histogram(data = subset(dBig,data=='original'), binwidth=500, color = "black", fill="red", alpha=.2) +
geom_histogram(data = subset(dBig,data=='filled'), binwidth=500, fill="blue", alpha=.2) +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
ggplot(dBig,aes(dailyTotalSteps))+
geom_histogram(data = subset(dBig,data=='original'), binwidth=500, color = "black", fill="red", alpha=0) +
geom_histogram(data = subset(dBig,data=='filled'), binwidth=500, fill="blue", alpha=.2) +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
ggplot(dBig,aes(x=dailyTotalSteps,color=data))+
geom_histogram(data = subset(dBig,data=='original'), binwidth=500, color = "black", fill="red", alpha=.2) +
geom_histogram(data = subset(dBig,data=='filled'), binwidth=500, fill="blue", alpha=.2) +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
ggplot(dBig,aes(x=dailyTotalSteps,color=data))+
geom_histogram(data = subset(dBig,data=='original'), binwidth=500, color = "black", fill="red", alpha=.2,position="identity") +
geom_histogram(data = subset(dBig,data=='filled'), binwidth=500, fill="blue", alpha=.2,position="identity") +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
ggplot(dBig,aes(x=dailyTotalSteps,color=data))+
geom_histogram(data = subset(dBig,data=='original'), binwidth=500, color = "black", fill="red", alpha=.2,position="identity") +
geom_histogram(data = subset(dBig,data=='filled'), binwidth=500, fill="blue", alpha=.2, position="identity") +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
name(dBig)
names(dBig)
ggplot(dBig,aes(x=dailyTotalSteps,color=data))+
geom_histogram(binwidth=500, alpha=.2, position="identity")
ggplot(dBig,aes(x=dailyTotalSteps,color=data))+
geom_histogram(binwidth=500, alpha=.2, position="identity") +
labs(list(title = 'Distribution of the total number of steps taken each day', x = "sum of steps", y = "count (days)"))
dSum
dSumFilled
head(d)
(d$date=='2012-10-01')
levels(d$date)
d$data
d$date
levels(d$date)
length(levels(d$date))
a = matrix(0,length(levels(d$date)),2)
for (i in 1:length(levels(d$date))){
a[i,1] = levels(d$date)[i]
a[i,2] = sum(is.na(d$steps[d$date==a[i,1]]))
}
a
max(dSumFilled$sumSteps)
mode(dSumFilled$sumSteps)
mediam(dSumFilled$sumSteps)
mediaa(dSumFilled$sumSteps)
median(dSumFilled$sumSteps)
a = data.frame(a)
colnames(a) = c('date','nNAs')
a
dBig
dBig$date = rep(d$date,times=2)
dBig$date = rep(dTimeSeries$date,times=2)
dBig
```
rep(dSumFilled$date,2)
dBig$date = rep(dSumFilled$date,2)
View(dBig)
View(dSum)
?weekdays
weekdays(dSum$date, abbreviate)
weekdays(dSum$date, abbreviate=TRUE)
weekday(dSum$date, abbreviate=TRUE)
weekday(as.Date(dSum$date), abbreviate=TRUE)
weekdays(as.Date(dSum$date), abbreviate=TRUE)
?gsb
?gsub
dSum$days = weekdays(as.Date(dSum$date), abbreviate=TRUE)
View(dSum)
txt <- "a test of capitalizing"
gsub("\\b(\\w)",    "\\U\\1",       txt, perl=TRUE)
gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", txt, perl=TRUE)
txt <- c("The", "licenses", "for", "most", "software", "are",
"designed", "to", "take", "away", "your", "freedom",
"to", "share", "and", "change", "it.",
"", "By", "contrast,", "the", "GNU", "General", "Public", "License",
"is", "intended", "to", "guarantee", "your", "freedom", "to",
"share", "and", "change", "free", "software", "--",
"to", "make", "sure", "the", "software", "is",
"free", "for", "all", "its", "users")
txt
txt[gsub("g","#", txt) !=
gsub("g","#", txt, ignore.case = TRUE)]
gsub("([S*])", "Weekend", dSum$days)
gsub("(S*)", "Weekend", dSum$days)
dSum$days = weekdays(as.Date(dSum$date), abbreviate=TRUE)
